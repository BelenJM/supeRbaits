x <- read.table("C:/Users/bmen/Dropbox/DTU/3.Salmon")
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon", )
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", )
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",skip=2 )
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",skip=3 )
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",skip=3, sep="," )
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",skip=3, sep=" " )
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", sep=" " )
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", sep=" " , head=T)
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", sep=" " , head=F)
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", lines=3)
tab5rows <- read.table("C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", header = TRUE, nrows = 5)
tab5rows <- read.table("C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", header = F, nrows = 5)
tab5rows <- read.table("C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", header = TRUE, nrows = 5)
classes <- sapply(tab5rows, class)
df <- read.csv(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",nrows=2000)
df <- read.csv(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",nrows=2000, header=F)
df
head(df)
df <- read.csv(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",nrows=20,ncols=20, header=F)
df <- read.csv(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",nrows=20, header=F)
head(df)
install.packages("ff")
library("ff")
x<- read.csv.ffdf(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", header=TRUE, VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
x<- read.csv.ffdf(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",
header=FALSE, VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
head(x)
View(df)
tab5rows <- read.table("C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", header = F, nrows = 5)
x <- read.table(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt", lines=3)
classes <- sapply(tab5rows, class)
tabAll <- read.table("datatable.txt", header = TRUE, colClasses = classes)
df <- read.csv(file="C:/Users/bmen/Dropbox/DTU/3.Salmon/snp_result.txt",nrows=20, header=F)
x1 <- runif(1, 1, 120)
x1
x1 <- sample(1:120, 1)
x1
# selecting random integer numbers:
x1 <- sample(1:120, 1)
x1
x1 <- sample(1:120, 1)
x1
x1 <- sample(1:120, 1)
x1
x1 <- sample(1:120, 1000)
x1
x1 <- sample(1:120, 100)
x1
x1 <- sample(1:120, 100, replace=T)
x1
x1 <- sample(1:120, 10000, replace=T)
x1
plot(x1)
plot(x1, x1)
hist(x1)
x1 <- sample(1:120, 10000, replace=T)
hist(x1)
source("https://bioconductor.org/biocLite.R")
biocLite()
x1 <- sample(1:120, 10, replace=T)
hist(x1)
help(runif)
x1 <- sample(1:120, 10, replace=T)
hist(x1)
library(BSgenome)
biocLite("BSgenome")
biocLite("BSgenome")
library(BSgenome)
available.genomes()
x1 <- sample(1:120, 10, replace=T)
hist(x1)
x1 <- sample(1:120, 10, replace=T)
hist(x1)
x1 <- sample(1:120, 10, replace=T)
hist(x1)
x = c(55, 90, 5)
x
x=seq(55,90,5)
x
x=seq(55,90,1)
y=c(29,29,38,47,50,42,39,50,40,50,38,36,35,34,25,25,15,17,19,21,13,11,8,8,9,5,5,6,5,5)
plot(x,y)
length(x)
length(y)
x=seq(55,85,1)
length(x)
x=seq(56,85,1)
length(x)
length(y)
plot(x,y)
plot(x,y, type="l")
plot(x,y, type="l", xlab = Years, ylab="Number of catched salmon")
plot(x,y, type="l", xlab = "Year", ylab="Number of catched salmon")
x=seq(1956,1985,1)
plot(x,y, type="l", xlab = "Year", ylab="Number of catched salmon")
install.packages("devtools")
#Packages to run LEA and LFMM
devtools::install_github("bcm-uga/LEA")
devtools::install_github("bcm-uga/LEA")
require("bcm-uga/LEA")
install.packages("RSpectra")
install.packages("cate")
devtools::install_github("whitlock/OutFLANK")
devtools::install_github("whitlock/OutFLANK")
devtools::install_github("bcm-uga/pcadapt")
install.packages("bigstatsr")
devtools::install_github("privefl/bigsnpr")
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
biocLite("qvalue")
require("qvalue")
install.packages("rehh")
install.packages("ape")
devtools::install_github("bcm-uga/LEA")
R.version
R.version
R.version
devtools::install_github("bcm-uga/LEA")
devtools::install_github("bcm-uga/lfmm")
devtools::install_github("whitlock/OutFLANK")
devtools::install_github("bcm-uga/pcadapt")
install.packages("RcppArmadillo")
install.packages("vcfR")
require("bcm-uga/pcadapt")
require("pcadapt")
devtools::install_github("bcm-uga/pcadapt")
devtools::install_github("bcm-uga/pcadapt")
require(pcadapt)
install.packages("bigstatsr")
install.packages("installr")
require(installr)
updateR()
install.packages("bigstatsr")
devtools::install_github("privefl/bigstatsr")
devtools::install_github("privefl/bigstatsr", ref = "v-bigmemory")
updateR()
install.packages("installr")
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
R.version
R.version
install.packages("devtools")
update.packages(checkBuilt=TRUE, ask=FALSE)
.libPaths()
install.packages("devtools", lib = "C:/Users/bmen/Documents/R/win-library/3.4/")
require(devtools)
require("devtools")
devtools::install_github("bcm-uga/LEA")
devtools::install_github("bcm-uga/LEA")
devtools::install_github("bcm-uga/lfmm") #** preparing package for lazy loading
require("devtools")
devtools::install_github("bcm-uga/LEA")
devtools::install_github("bcm-uga/LEA", force=T)
devtools::install_github("bcm-uga/LEA", force=T)
devtools::install_github("bcm-uga/LEA", force=T)
devtools::install_github("bcm-uga/LEA")
devtools::install_github("bcm-uga/LEA", force=T)
install.packages("RSpectra")
devtools::install_github("bcm-uga/lfmm") #** preparing package for lazy loading
devtools::install_github("bcm-uga/lfmm") #** preparing package for lazy loading
devtools::install_github("bcm-uga/LEA")
devtools::install_github("bcm-uga/LEA", force=T)
install.packages("cate")
devtools::install_github("whitlock/OutFLANK")
devtools::install_github("whitlock/OutFLANK", force=T)
devtools::install_github("bcm-uga/pcadapt")
devtools::install_github("bcm-uga/pcadapt", force=T)
install.packages("bigstatsr") #   package ‘bigstatsr’ is not available (for R version 3.3.1), I installed the first version
devtools::install_github("privefl/bigsnpr")
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
biocLite("rehh")
install.packages("ape")
require(ape)
require("qvalue")
require(lfmm)
require(OutFLANK)
library(tidyverse)
require(tidyverse)
install.packages("tidyverse")
require(tidyverse)
x = c("1913_1", "1913_2", "1943", "1944", "1945", "1949", "1958", "1959", "Undet")
reads = c(3100315, 2698288, 4834902, 2846043, 4348510, 5050795, 4475550, 4856482, 1176063)
plot(x, reads)
plot(x, reads, ylab= "No. of reads", xlab = "Sample")
barplot(x, reads, ylab= "No. of reads", xlab = "Sample")
barplot(x, ylab= "No. of reads", xlab = "Sample")
x = c("1913_1", "1913_2", "1943", "1944", "1949", "1958", "1959", "1961", "Undet")
barplot(reads, ylab= "No. of reads", xlab = "Sample", names.arg=x)
barplot(reads, ylab= "No. of reads", xlab = "Sample", names.arg=x, las=2)
barplot(reads, ylab= "No. of reads", xlab = "Sample", names.arg=x, las=2, cex.names=0.7)
barplot(reads, ylab= "No. of reads", xlab = "Sample", names.arg=x, las=2, cex.names=0.8)
reads_mill <- reads/1000000
reads_mill
barplot(reads_mill, ylab= "No. of reads", xlab = "Sample",
names.arg=x, las=2, cex.names=0.8)
13-09_S8_L001:  (“testHighQual_Aug2017”, with the high quality reagents)// 2543121 (“testLowQual_Aug2017”, with the low quality reagents)
barplot(reads_mill, ylab= "No. of reads (in Mill.)", xlab = "Sample",
names.arg=x, las=2, cex.names=0.8)
barplot(reads_mill, ylab= "No. of reads (Mill.)", xlab = "Sample",
names.arg=x, las=2, cex.names=0.8)
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=2, cex.names=0.8)
x = c("1913_1", "1913_2", "1943", "1944", "1949", "1958", "1959", "1961", "Undeterminated")
reads = c(3100315, 2698288, 4834902, 2846043, 4348510, 5050795, 4475550, 4856482, 1176063)
reads_mill <- reads/1000000
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=2, cex.names=0.8)
x = c("1913_1", "1913_2", "1943", "1944", "1949", "1958", "1959", "1961", "Undet.")
reads = c(3100315, 2698288, 4834902, 2846043, 4348510, 5050795, 4475550, 4856482, 1176063)
reads_mill <- reads/1000000
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=2, cex.names=0.8)
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=2, cex.names=0.8, col="blue")
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=2, cex.names=0.8, col="light blue")
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=1, cex.names=0.9, col="light blue")
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=1.5, cex.names=0.9, col="light blue")
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=3, cex.names=0.9, col="light blue")
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=3, cex.names=1, col="light blue")
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=1, cex.names=1, col="light blue")
x = c("1913_1", "1913_2", "1943", "1944", "1949", "2008_1", "2008_2", "2008_3", "Undet.")
reads = c(3100315, 2698288, 4834902, 2846043, 4348510, 5050795, 4475550, 4856482, 1176063)
reads_mill <- reads/1000000
barplot(reads_mill, ylab= "No. of reads (*10^6)", xlab = "Sample",
names.arg=x, las=1, cex.names=1, col="light blue")
pop_size <- c(138,40,34,42,37,41,34)
1/pop_size[1]
hm_1984 <- 1/pop_size[1]
hm_1985 <- 1/pop_size[2]
hm_1986 <- 1/pop_size[3]
hm_1987 <- 1/pop_size[4]
hm_1988 <- 1/pop_size[5]
hm_1989 <- 1/pop_size[6]
hm_1990 <- 1/pop_size[7]
Ne_inbreeding <- 1/(hm_1984+hm_1985+hm_1986+hm_1987+hm_1988+hm_1989+hm_1990)
Ne_inbreeding
t = 7
# Inbreeding effective pop size
Ne_inbreeding <- t/(hm_1984+hm_1985+hm_1986+hm_1987+hm_1988+hm_1989+hm_1990)
Ne_inbreeding
# Number of generations
t = 6
# Inbreeding effective pop size
Ne_inbreeding <- t/(hm_1984+hm_1985+hm_1986+hm_1987+hm_1988+hm_1989+hm_1990)
Ne_inbreeding
print("hola")
install.packages("rmarkdown")
install.packages("knitr")
require(rmarkdown)
require(knitr)
require(devtools)
require(usethis)
install.packages("usethis")
require(usethis)
usethis::create_package("bjm.helpers")
usethis::create_package("helpers")
# Ctrol Shift B for installing
library(helpers)
addition(2,3)
usethis::use_usethis()
usethis::use_package("ggplot2")
##### GENLIGHT OBJECT ####
# After exploration with vcf tools of the missingness of individuals, let s filter individuals
# that have > 30% of missing data
require(dartR)
install.packages("dartR")
##### GENLIGHT OBJECT ####
# After exploration with vcf tools of the missingness of individuals, let s filter individuals
# that have > 30% of missing data
install.packages("devtools")
library(devtools)
install.packages("BiocManager")
install.packages("devtools")
devtools::install_github("kkdey/CountClust")
devtools::install_github("TaddyLab/maptpx")
devtools::install_github("kkdey/CountClust")
install.packages("devtools")
install.packages("devtools")
require("devtools")
devtools::install_github("kkdey/CountClust")
devtools::install_github("TaddyLab/maptpx")
devtools::install_github("kkdey/Logolas")
source("https://bioconductor.org/biocLite.R")
biocLite("Logolas")
devtools::install_github("kkdey/aRchaic")
require("aRchaic")
install("aRchaic")
install.packages("aRchaic")
require("aRchaic")
devtools::install_github("kkdey/CountClust")
biocLite("CountClust")
biocLite("maptpx")
install.packages("aRchaic")
biocLite("aRchaic")
require("aRchaic")
devtools::install_github("kkdey/Logolas")
utils::download.file('https://api.github.com/repos/kkdey/Logolas/tarball/master')
devtools::install_github('https://api.github.com/repos/kkdey/Logolas/tarball/master')
devtools::install_github('kkdey/Logolas/tarball/master')
source("https://bioconductor.org/biocLite.R")
biocLite(c("Biostrings","BiocStyle","Biobase","seqLogo","ggseqlogo"))
install_github("kkdey/Logolas",build_vignettes = TRUE)
library(devtools)
devtools::install_github("kkdey/Logolas",build_vignettes = TRUE)
devtools::install_github("kkdey/Logolas",build_vignettes = TRUE)
utils::download.file(source_url, destfile="aa.zip", method="libcurl")
devtools::install_github("kkdey/Logolas",build_vignettes = TRUE,, method="libcurl")
devtools::install_github("kkdey/Logolas",build_vignettes = TRUE, method="libcurl")
install.packages("devtools")
require("devtools")
devtools::install_github("kkdey/Logolas")
devtools::install_github("kkdey/aRchaic")
install.packages("ps")
devtools::install_github("kkdey/Logolas")
install.packages("rlang")
devtools::install_github("kkdey/Logolas")
biocLite(c("Biostrings","BiocStyle","Biobase","seqLogo","ggseqlogo"))
source("https://bioconductor.org/biocLite.R")
biocLite(c("Biostrings","BiocStyle","Biobase","seqLogo","ggseqlogo"))
devtools::install_github("kkdey/Logolas",build_vignettes = TRUE, method="libcurl")
install.packages("devtools")
require("devtools")
install.packages("backports")
require("devtools")
devtools::install_github("kkdey/Logolas")
devtools::install_github("kkdey/Logolas")
biocLite("Logolas")
source("https://bioconductor.org/biocLite.R")
devtools::install_github("kkdey/Logolas")
devtools::install_github("kkdey/Logolas")
library("Logolas")
library("maptpx")
library("aRchaic")
setwd("Documents/DTU/2.Codstory/")
moderns_dir <- system.file("extdata","moderns", package = "aRchaic")
list.files(moderns_dir, pattern = ".csv")
ancients_dir <- system.file("extdata","ancients", package = "aRchaic") #optional but if not, need more packrat samples to replace these files
list.files(ancients_dir, pattern = ".csv")
out <- archaic_prepare(dirs = c(moderns_dir, ancients_dir),
from_scratch=TRUE, delete=TRUE, one_mismatch=TRUE,
max_pos=20
)
#3. Choose an output folder
output_dir <- system.file("extdata","archaic_results", package = "aRchaic")
model <- archaic_fit(out, K = 2, output_dir = output_dir)
#4. Model
archaic_plot(model, output_dir = output_dir, background = "modern")
?basic.stats
require(dartR)
?basic.stats
require(radiator)
install.package(radiator)
install.packages(radiator)
install.packages("radiator")
pb <- txtProgressBar(min = 0, max = 10), style = 3, width = 60)
pb <- txtProgressBar(min = 0, max = 10, style = 3, width = 60)
{
pb <- txtProgressBar(min = 0, max = 10, style = 3, width = 60)
for(i in 1:10){
setTxtProgressBar(pb, i)
flush.console()
}
}
{
pb <- txtProgressBar(min = 0, max = 1000000, style = 3, width = 60)
for(i in 1:1000000){
setTxtProgressBar(pb, i)
flush.console()
}
}
x=159*100/905
x
x=colour*100/905
colour=152
x=colour*100/905
x
colour=159
x=colour*100/905
x
colour=158
x=colour*100/905
x
colour=150
x=colour*100/905
x
colour=161
x=colour*100/905
x
colour=125
x=colour*100/905
x
citation(R)
citation()
setwd("GitHub/baits4pop/")
devtools::document()
devtools::install()
baits4pop::retrieve_baits(chr="testdata/chrom_salmon_chunk.fasta.txt", positions="testdata/bed_CM003279.txt")
devtools::install()
baits4pop::retrieve_baits(chr="testdata/chrom_salmon_chunk.fasta.txt", positions="testdata/bed_CM003279.txt")
